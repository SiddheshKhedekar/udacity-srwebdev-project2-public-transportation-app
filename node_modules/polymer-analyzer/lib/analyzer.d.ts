/// <reference path="../custom_typings/main.d.ts" />
import { Document } from './model/model';
import { Parser } from './parser/parser';
import { Measurement } from './perf/telemetry';
import { Scanner } from './scanning/scanner';
import { UrlLoader } from './url-loader/url-loader';
import { UrlResolver } from './url-loader/url-resolver';
export interface Options {
    urlLoader: UrlLoader;
    urlResolver?: UrlResolver;
    parsers?: Map<string, Parser<any>>;
    scanners?: ScannerTable;
    lazyEdges?: LazyEdgeMap;
}
export declare class NoKnownParserError extends Error {
}
export declare type ScannerTable = Map<string, Scanner<any, any, any>[]>;
export declare type LazyEdgeMap = Map<string, string[]>;
/**
 * A static analyzer for web projects.
 *
 * An Analyzer can load and parse documents of various types, and extract
 * arbitratrary information from the documents, and transitively load
 * dependencies. An Analyzer instance is configured with parsers, and scanners
 * which do the actual work of understanding different file types.
 */
export declare class Analyzer {
    private _parsers;
    /** A map from import url to urls that document lazily depends on. */
    private _lazyEdges;
    private _scanners;
    private _loader;
    private _resolver;
    private _parsedDocumentPromises;
    private _scannedDocumentPromises;
    private _analyzedDocumentPromises;
    private _scannedDocuments;
    private _analyzedDocuments;
    private _telemetryTracker;
    private static _getDefaultScanners(lazyEdges);
    constructor(options: Options);
    /**
     * Loads, parses and analyzes the root document of a dependency graph and its
     * transitive dependencies.
     *
     * Note: The analyzer only supports analyzing a single root for now. This
     * is because each analyzed document in the dependency graph has a single
     * root. This mean that we can't properly analyze app-shell-style, lazy
     * loading apps.
     *
     * @param contents Optional contents of the file when it is known without
     * reading it from disk. Clears the caches so that the news contents is used
     * and reanalyzed. Useful for editors that want to re-analyze changed files.
     */
    analyze(url: string, contents?: string): Promise<Document>;
    /**
     * Constructs a new analyzed Document and adds it to the analyzed Document
     * cache.
     */
    private _makeDocument(scannedDocument);
    /**
     * Gets an analyzed Document from the document cache. This is only useful for
     * Analyzer plugins. You almost certainly want to use `analyze()` instead.
     *
     * If a document has been analyzed, it returns the analyzed Document. If not
     * the scanned document cache is used and a new analyzed Document is returned.
     * If a file is in neither cache, it returns `undefined`.
     */
    _getDocument(url: string): Document | undefined;
    getTelemetryMeasurements(): Promise<Measurement[]>;
    /**
     * Clear all cached information from this analyzer instance.
     *
     * Note: if at all possible, instead tell the analyzer about the specific
     * files that changed rather than clearing caches like this. Caching provides
     * large performance gains.
     */
    clearCaches(): void;
    /**
     * Scan a toplevel document given its url and optionally its contents.
     */
    private _scan(resolvedUrl, contents?);
    /**
     * Parses and scans a document from source.
     */
    private _scanInlineSource(type, contents, url, inlineInfo, attachedComment?);
    /**
     * Scans a ParsedDocument.
     */
    private _scanDocument(document, maybeAttachedComment?);
    /**
     * Scan all the dependencies of the given scanned document.
     *
     * This must be called exactly once per scanned document, as we mutate
     * the given scannedDocument by adding warnings.
     */
    private _scanDependencies(scannedDocument);
    /**
     * Scan an inline document found within a containing parsed doc.
     */
    private _scanInlineDocument(inlineDoc, containingDocument, warnings);
    private _scanImport(scannedImport, warnings);
    /**
     * Loads the content at the provided resolved URL.
     *
     * Currently does no caching. If the provided contents are given then they
     * are used instead of hitting the UrlLoader (e.g. when you have in-memory
     * contents that should override disk).
     */
    load(resolvedUrl: string, providedContents?: string): Promise<string>;
    private _parse(resolvedUrl, providedContents?);
    private _parseContents(type, contents, url, inlineInfo?);
    private _getScannedFeatures(document);
    /**
     * Resolves a URL with this Analyzer's `UrlResolver` if it has one, otherwise
     * returns the given URL.
     */
    private _resolveUrl(url);
}
