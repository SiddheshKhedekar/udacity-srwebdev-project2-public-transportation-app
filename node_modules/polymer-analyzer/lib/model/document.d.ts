/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
import { Analyzer } from '../analyzer';
import { ParsedDocument } from '../parser/document';
import { Behavior } from '../polymer/behavior';
import { DomModule } from '../polymer/dom-module-scanner';
import { PolymerElement } from '../polymer/polymer-element';
import { Warning } from '../warning/warning';
import { Element } from './element';
import { ElementReference } from './element-reference';
import { Feature, ScannedFeature } from './feature';
import { Import } from './import';
import { SourceRange } from './source-range';
/**
 * The metadata for all features and elements defined in one document
 */
export declare class ScannedDocument {
    document: ParsedDocument<any, any>;
    features: ScannedFeature[];
    isInline: boolean;
    sourceRange: SourceRange | undefined;
    warnings: Warning[];
    constructor(document: ParsedDocument<any, any>, features: ScannedFeature[], warnings?: Warning[]);
    readonly url: string;
}
export declare class Document implements Feature {
    kinds: Set<string>;
    identifiers: Set<string>;
    analyzer: Analyzer;
    warnings: Warning[];
    private _localFeatures;
    private _scannedDocument;
    /** See parsedDocument. */
    astNode: null;
    /**
     * To handle recursive dependency graphs we must track whether we've started
     * resolving this Document so that we can reliably early exit even if one
     * of our dependencies tries to resolve this document.
     */
    private _begunResolving;
    /**
     * True after this document and all of its children are finished resolving.
     */
    private _doneResolving;
    constructor(base: ScannedDocument, analyzer: Analyzer);
    readonly url: string;
    readonly isInline: boolean;
    readonly parsedDocument: ParsedDocument<any, any>;
    readonly sourceRange: SourceRange | undefined;
    readonly resolved: boolean;
    readonly type: string;
    /**
     * Resolves all features of this document, so that they have references to all
     * their dependencies.
     *
     * This method can only be called once
     */
    resolve(): void;
    /**
     * Adds and indexes a feature to this documentled before resolve().
     */
    _addFeature(feature: Feature): void;
    getByKind(kind: 'element'): Set<Element>;
    getByKind(kind: 'polymer-element'): Set<PolymerElement>;
    getByKind(kind: 'behavior'): Set<Behavior>;
    getByKind(kind: 'dom-module'): Set<DomModule>;
    getByKind(kind: 'document'): Set<Document>;
    getByKind(kind: 'import'): Set<Import>;
    getByKind(kind: 'element-reference'): Set<ElementReference>;
    getByKind(kind: string): Set<Feature>;
    getById(kind: 'element', tagName: string): Set<Element>;
    getById(kind: 'polymer-element', tagName: string): Set<Document>;
    getById(kind: 'behavior', className: string): Set<Behavior>;
    getById(kind: 'dom-module', idAttr: string): Set<DomModule>;
    getById(kind: 'document', url: string): Set<Document>;
    getById(kind: 'element-reference', tagName: string): Set<ElementReference>;
    getById(kind: string, identifier: string): Set<Feature>;
    getOnlyAtId(kind: 'element', tagName: string): Element | undefined;
    getOnlyAtId(kind: 'polymer-element', tagName: string): PolymerElement | undefined;
    getOnlyAtId(kind: 'behavior', className: string): Behavior | undefined;
    getOnlyAtId(kind: 'dom-module', idAttr: string): DomModule | undefined;
    getOnlyAtId(kind: 'document', url: string): Document | undefined;
    getOnlyAtId(kind: 'element-reference', tagName: string): ElementReference;
    getOnlyAtId(kind: string, identifier: string): Feature | undefined;
    private _getByKind(kind, documentsWalked);
    /**
     * Get features for all documents reachable via imports in this document.
     * If `deep` is false, only return features in this document.
     */
    getFeatures(deep?: boolean): Set<Feature>;
    private _getFeatures(result, visited, deep);
    /**
     * Get warnings for this document and all local features of this document. If
     * `deep` is true, return warnings for all documents and features reachable
     * via imports in this document.
     */
    getWarnings(deep?: boolean): Warning[];
    toString(): string;
    private _toString(documentsWalked);
    stringify(): string;
    private _featuresByKind;
    private _featuresByKindAndId;
    private _initIndexes();
    private _indexFeature(feature);
    private _buildIndexes();
}
