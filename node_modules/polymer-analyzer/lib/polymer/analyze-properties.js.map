{"version":3,"sources":["polymer/analyze-properties.ts"],"names":[],"mappings":"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","file":"analyze-properties.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport * as astValue from '../javascript/ast-value';\nimport * as esutil from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {ScannedProperty} from '../model/model';\nimport {Severity} from '../warning/warning';\n\nimport {toScannedPolymerProperty} from './js-utils';\n\nexport function analyzeProperties(\n    node: estree.Node, document: JavaScriptDocument) {\n  const analyzedProps: ScannedProperty[] = [];\n\n  if (node.type !== 'ObjectExpression') {\n    return analyzedProps;\n  }\n  for (const property of node.properties) {\n    const prop = toScannedPolymerProperty(\n        property, document.sourceRangeForNode(property)!);\n    prop.published = true;\n\n    let isComputed = false;\n\n    if (property.value.type !== 'ObjectExpression') {\n      continue;\n    }\n    /**\n     * Parse the expression inside a property object block. e.g.\n     * property: {\n     *   key: {\n     *     type: String,\n     *     notify: true,\n     *     value: -1,\n     *     readOnly: true,\n     *     reflectToAttribute: true\n     *   }\n     * }\n     */\n    for (const propertyArg of property.value.properties) {\n      const propertyKey = esutil.objectKeyToString(propertyArg.key);\n\n      switch (propertyKey) {\n        case 'type':\n          prop.type = esutil.objectKeyToString(propertyArg.value);\n          prop.type = esutil.CLOSURE_CONSTRUCTOR_MAP[prop.type!] || prop.type;\n          if (prop.type === undefined) {\n            prop.warnings.push({\n              code: 'invalid-property-type',\n              message: 'Invalid type in property object.',\n              severity: Severity.ERROR,\n              sourceRange: document.sourceRangeForNode(propertyArg)!\n            });\n          }\n          break;\n        case 'notify':\n          prop.notify = !!astValue.expressionToValue(propertyArg.value);\n          break;\n        case 'observer':\n          const val = astValue.expressionToValue(propertyArg.value);\n          prop.observerNode = propertyArg.value;\n          if (val === undefined) {\n            prop.observer = astValue.CANT_CONVERT;\n          } else {\n            prop.observer = JSON.stringify(val);\n          }\n          break;\n        case 'readOnly':\n          prop.readOnly = !!astValue.expressionToValue(propertyArg.value);\n          break;\n        case 'reflectToAttribute':\n          prop.reflectToAttribute = !!astValue.expressionToValue(propertyArg);\n          break;\n        case 'computed':\n          isComputed = true;\n          break;\n        case 'value':\n          prop.default =\n              JSON.stringify(astValue.expressionToValue(propertyArg.value));\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (isComputed) {\n      prop.readOnly = true;\n    }\n\n    if (!prop.type) {\n      prop.warnings.push({\n        code: 'no-type-for-property',\n        message: 'Unable to determine type for property.',\n        severity: Severity.WARNING,\n        sourceRange: document.sourceRangeForNode(property)!\n      });\n    }\n\n    analyzedProps.push(prop);\n  }\n  return analyzedProps;\n};\n"]}